type UserProduct @key(fields: "_id") {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
  productId: ID!
  isFav: Boolean
}

input CreateUserProductInput {
  userId: ID!
  productId: ID!
  isFav: Boolean
}

input UpdateUserProductInput {
  _id: ID!
  userId: ID
  productId: ID
  isFav: Boolean
}

extend type Query {
  getUserProductById(_id: ID!): UserProduct @serviceAdmin @cacheSet(type: "getUserProductById", identifier: "_id")
  getAllUserProduct(search: String, filter: JSON, sort: JSON, limit: Int, offset: Int): [UserProduct]!
    @serviceAdmin
    @cacheSet(type: "getAllUserProduct", identifier: "_id")
  getOneUserProduct(filter: JSON, sort: JSON): UserProduct @serviceAdmin @cacheSet(type: "getUserProduct", identifier: "_id")
  getAllUserProductCount(search: String, filter: JSON): Int! @serviceAdmin
}

extend type Mutation {
  createUserProduct(data: CreateUserProductInput!): UserProduct!
    @serviceAdmin
    @cachePurge(payloads: [{ types: ["getOneUserProduct", "getAllUserProduct"] }])
  createManyUserProduct(datas: [CreateUserProductInput!]!): [UserProduct!]!
    @serviceAdmin
    @cachePurge(payloads: [{ types: ["getOneUserProduct", "getAllUserProduct"] }])
  updateUserProduct(data: UpdateUserProductInput!): UserProduct!
    @serviceAdmin
    @cachePurge(payloads: [{ types: ["getOneUserProduct", "getAllUserProduct", "getUserProductById"], identifier: "_id" }])
  updateManyUserProduct(datas: [UpdateUserProductInput!]!): [UserProduct!]!
    @serviceAdmin
    @cachePurge(payloads: [{ types: ["getOneUserProduct", "getAllUserProduct", "getUserProductById"], identifier: "_id" }])
  deleteUserProduct(_id: ID!): UserProduct!
    @serviceAdmin
    @cachePurge(payloads: [{ types: ["getOneUserProduct", "getAllUserProduct", "getUserProductById"], identifier: "_id" }])
  deleteManyUserProduct(filter: JSON!): [UserProduct!]!
    @serviceAdmin
    @cachePurge(payloads: [{ types: ["getOneUserProduct", "getAllUserProduct", "getUserProductById"], identifier: "_id" }])
}
